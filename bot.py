#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
import psycopg2
import requests
import time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    Filters,
    CallbackContext
)

# -----------------------------------
# ุฅุนุฏุงุฏุงุช ุงูุณุฌู (logging)
# -----------------------------------
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# -----------------------------------
# ูุชุบูุฑุงุช ุงูุจูุฆุฉ (ENV Variables)
# -----------------------------------
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))
TOKEN = os.environ.get("TOKEN")
API_KEY = os.environ.get("API_KEY")
API_URL = os.environ.get("API_URL")

# -----------------------------------
# ุชุนุฑูู ุงูููุงููุณ ุงูุฎุงุตุฉ ุจุงูุฎุฏูุงุช
# -----------------------------------
service_api_mapping = {
    "ูุชุงุจุนูู ุชููุชูู 1k": {"service_id": 13912, "quantity_multiplier": 1000},
    "ูุชุงุจุนูู ุชููุชูู 2k": {"service_id": 13912, "quantity_multiplier": 2000},
    "ูุชุงุจุนูู ุชููุชูู 3k": {"service_id": 13912, "quantity_multiplier": 3000},
    "ูุชุงุจุนูู ุชููุชูู 4k": {"service_id": 13912, "quantity_multiplier": 4000},
    "ูุดุงูุฏุงุช ุชููุชูู 1k": {"service_id": 9543, "quantity_multiplier": 1000},
    "ูุดุงูุฏุงุช ุชููุชูู 10k": {"service_id": 9543, "quantity_multiplier": 10000},
    "ูุดุงูุฏุงุช ุชููุชูู 20k": {"service_id": 9543, "quantity_multiplier": 20000},
    "ูุดุงูุฏุงุช ุชููุชูู 30k": {"service_id": 9543, "quantity_multiplier": 30000},
    "ูุดุงูุฏุงุช ุชููุชูู 50k": {"service_id": 9543, "quantity_multiplier": 50000},
    "ูุชุงุจุนูู ุงูุณุชุบุฑุงู 1k": {"service_id": 13788, "quantity_multiplier": 1000},
    "ูุชุงุจุนูู ุงูุณุชุบุฑุงู 2k": {"service_id": 13788, "quantity_multiplier": 2000},
    "ูุชุงุจุนูู ุงูุณุชุบุฑุงู 3k": {"service_id": 13788, "quantity_multiplier": 3000},
    "ูุชุงุจุนูู ุงูุณุชุบุฑุงู 4k": {"service_id": 13788, "quantity_multiplier": 4000},
    "ูุงููุงุช ุชููุชูู 1k": {"service_id": 12320, "quantity_multiplier": 1000},
    "ูุงููุงุช ุชููุชูู 2k": {"service_id": 12320, "quantity_multiplier": 2000},
    "ูุงููุงุช ุชููุชูู 3k": {"service_id": 12320, "quantity_multiplier": 3000},
    "ูุงููุงุช ุชููุชูู 4k": {"service_id": 12320, "quantity_multiplier": 4000},
    "ูุงููุงุช ุงูุณุชุบุฑุงู 1k": {"service_id": 7973, "quantity_multiplier": 1000},
    "ูุงููุงุช ุงูุณุชุบุฑุงู 2k": {"service_id": 7973, "quantity_multiplier": 2000},
    "ูุงููุงุช ุงูุณุชุบุฑุงู 3k": {"service_id": 7973, "quantity_multiplier": 3000},
    "ูุงููุงุช ุงูุณุชุบุฑุงู 4k": {"service_id": 7973, "quantity_multiplier": 4000},
    "ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู 10k": {"service_id": 13531, "quantity_multiplier": 10000},
    "ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู 20k": {"service_id": 13531, "quantity_multiplier": 20000},
    "ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู 30k": {"service_id": 13531, "quantity_multiplier": 30000},
    "ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู 50k": {"service_id": 13531, "quantity_multiplier": 50000},
    "ูุดุงูุฏุงุช ุจุซ ุชููุชูู 1k": {"service_id": 13813, "quantity_multiplier": 1000},
    "ูุดุงูุฏุงุช ุจุซ ุชููุชูู 2k": {"service_id": 13813, "quantity_multiplier": 2000},
    "ูุดุงูุฏุงุช ุจุซ ุชููุชูู 3k": {"service_id": 13813, "quantity_multiplier": 3000},
    "ูุดุงูุฏุงุช ุจุซ ุชููุชูู 4k": {"service_id": 13813, "quantity_multiplier": 4000},
    "ูุดุงูุฏุงุช ุจุซ ุงูุณุชุบุฑุงู 1k": {"service_id": 12595, "quantity_multiplier": 1000},
    "ูุดุงูุฏุงุช ุจุซ ุงูุณุชุบุฑุงู 2k": {"service_id": 12595, "quantity_multiplier": 2000},
    "ูุดุงูุฏุงุช ุจุซ ุงูุณุชุบุฑุงู 3k": {"service_id": 12595, "quantity_multiplier": 3000},
    "ูุดุงูุฏุงุช ุจุซ ุงูุณุชุบุฑุงู 4k": {"service_id": 12595, "quantity_multiplier": 4000},
    "ููุงุท ุชุญุฏูุงุช ุชูู ุชูู ุฌุฏูุฏุฉ | ุณููุฑ ๐ฏ": {"service_id": 13125, "quantity_multiplier": 1000},
    "ุฑูุน ุณููุฑ ุจุซู1k": {"service_id": 13125, "quantity_multiplier": 1000},
    "ุฑูุน ุณููุฑ ุจุซู2k": {"service_id": 13125, "quantity_multiplier": 2000},
    "ุฑูุน ุณููุฑ ุจุซู3k": {"service_id": 13125, "quantity_multiplier": 3000},
    "ุฑูุน ุณููุฑ ุจุซู10k": {"service_id": 13125, "quantity_multiplier": 10000},
}

services_dict = {
    "ูุชุงุจุนูู ุชููุชูู 1k": 3.50,
    "ูุชุงุจุนูู ุชููุชูู 2k": 7,
    "ูุชุงุจุนูู ุชููุชูู 3k": 10.50,
    "ูุชุงุจุนูู ุชููุชูู 4k": 14,
    "ูุดุงูุฏุงุช ุชููุชูู 1k": 0.1,
    "ูุดุงูุฏุงุช ุชููุชูู 10k": 0.80,
    "ูุดุงูุฏุงุช ุชููุชูู 20k": 1.60,
    "ูุดุงูุฏุงุช ุชููุชูู 30k": 2.40,
    "ูุดุงูุฏุงุช ุชููุชูู 50k": 3.20,
    "ูุชุงุจุนูู ุงูุณุชุบุฑุงู 1k": 3,
    "ูุชุงุจุนูู ุงูุณุชุบุฑุงู 2k": 6,
    "ูุชุงุจุนูู ุงูุณุชุบุฑุงู 3k": 9,
    "ูุชุงุจุนูู ุงูุณุชุบุฑุงู 4k": 12,
    "ูุงููุงุช ุชููุชูู 1k": 1,
    "ูุงููุงุช ุชููุชูู 2k": 2,
    "ูุงููุงุช ุชููุชูู 3k": 3,
    "ูุงููุงุช ุชููุชูู 4k": 4,
    "ูุงููุงุช ุงูุณุชุบุฑุงู 1k": 1,
    "ูุงููุงุช ุงูุณุชุบุฑุงู 2k": 2,
    "ูุงููุงุช ุงูุณุชุบุฑุงู 3k": 3,
    "ูุงููุงุช ุงูุณุชุบุฑุงู 4k": 4,
    "ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู 10k": 0.80,
    "ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู 20k": 1.60,
    "ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู 30k": 2.40,
    "ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู 50k": 3.20,
    "ูุดุงูุฏุงุช ุจุซ ุชููุชูู 1k": 2,
    "ูุดุงูุฏุงุช ุจุซ ุชููุชูู 2k": 4,
    "ูุดุงูุฏุงุช ุจุซ ุชููุชูู 3k": 6,
    "ูุดุงูุฏุงุช ุจุซ ุชููุชูู 4k": 8,
    "ูุดุงูุฏุงุช ุจุซ ุงูุณุชุบุฑุงู 1k": 2,
    "ูุดุงูุฏุงุช ุจุซ ุงูุณุชุบุฑุงู 2k": 4,
    "ูุดุงูุฏุงุช ุจุซ ุงูุณุชุบุฑุงู 3k": 6,
    "ูุดุงูุฏุงุช ุจุซ ุงูุณุชุบุฑุงู 4k": 8,
    "ููุงุท ุชุญุฏูุงุช ุชูู ุชูู ุฌุฏูุฏุฉ | ุณููุฑ ๐ฏ": 0.51,
    "ุฑูุน ุณููุฑ ุจุซู1k": 2,
    "ุฑูุน ุณููุฑ ุจุซู2k": 4,
    "ุฑูุน ุณููุฑ ุจุซู3k": 6,
    "ุฑูุน ุณููุฑ ุจุซู10k": 20,
}

pubg_services = {
    "ุจุจุฌู 60 ุดุฏุฉ": 2,
    "ุจุจุฌู 120 ุดุฏู": 4,
    "ุจุจุฌู 180 ุดุฏุฉ": 6,
    "ุจุจุฌู 240 ุดุฏุฉ": 8,
    "ุจุจุฌู 325 ุดุฏุฉ": 9,
    "ุจุจุฌู 660 ุดุฏุฉ": 15,
    "ุจุจุฌู 1800 ุดุฏุฉ": 40,
}

itunes_services = {
    "ุดุฑุงุก ุฑุตูุฏ 5 ุงูุชููุฒ": 9,
    "ุดุฑุงุก ุฑุตูุฏ 10 ุงูุชููุฒ": 18,
    "ุดุฑุงุก ุฑุตูุฏ 15 ุงูุชููุฒ": 27,
    "ุดุฑุงุก ุฑุตูุฏ 20 ุงูุชููุฒ": 36,
    "ุดุฑุงุก ุฑุตูุฏ 25 ุงูุชููุฒ": 45,
    "ุดุฑุงุก ุฑุตูุฏ 30 ุงูุชููุฒ": 54,
    "ุดุฑุงุก ุฑุตูุฏ 35 ุงูุชููุฒ": 63,
    "ุดุฑุงุก ุฑุตูุฏ 40 ุงูุชููุฒ": 72,
    "ุดุฑุงุก ุฑุตูุฏ 45 ุงูุชููุฒ": 81,
    "ุดุฑุงุก ุฑุตูุฏ 50 ุงูุชููุฒ": 90,
}

telegram_services = {
    "ุงุนุถุงุก ูููุงุช ุชูู 1k": 3,
    "ุงุนุถุงุก ูููุงุช ุชูู 2k": 6,
    "ุงุนุถุงุก ูููุงุช ุชูู 3k": 9,
    "ุงุนุถุงุก ูููุงุช ุชูู 4k": 12,
    "ุงุนุถุงุก ูููุงุช ุชูู 5k": 15,
    "ุงุนุถุงุก ูุฑูุจุงุช ุชูู 1k": 3,
    "ุงุนุถุงุก ูุฑูุจุงุช ุชูู 2k": 6,
    "ุงุนุถุงุก ูุฑูุจุงุช ุชูู 3k": 9,
    "ุงุนุถุงุก ูุฑูุจุงุช ุชูู 4k": 12,
    "ุงุนุถุงุก ูุฑูุจุงุช ุชูู 5k": 15,
}

# -----------------------------------
# ูุชุบูุฑุงุช ุงูุชุฎุฒูู ุงููุคูุช ููุทูุจุงุช ูุงูุฑุตูุฏ
# -----------------------------------
users_balance = {}
pending_orders = []         # ุงูุทูุจุงุช ุงููุนููุฉ (ุบูุฑ ุงูู API)
pending_cards = []          # ุงููุฑูุช ุงููุนููุฉ
pending_pubg_orders = []    # ุทูุจุงุช ุดุฏุงุช ุจุจุฌู ุงููุนููุฉ
completed_orders = []       # ุงูุทูุจุงุช ุงูููุชููุฉ (ูุน ุฅุถุงูุฉ ุงูุทุงุจุน ุงูุฒููู)
pending_itunes_orders = []  # ุทูุจุงุช ุดุญู ุงูุงูุชููุฒ ุงููุนููุฉ
blocked_users = {}          # ูุงููุณ ุงููุณุชุฎุฏููู ุงููุญุธูุฑูู

# -----------------------------------
# ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุจูุงูุงุช Neon (psycopg2)
# -----------------------------------
NEON_DATABASE_URL = os.environ.get("NEON_DATABASE_URL")
if not NEON_DATABASE_URL:
    raise Exception("NEON_DATABASE_URL environment variable is not set.")

conn = psycopg2.connect(NEON_DATABASE_URL, sslmode="require")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT PRIMARY KEY,
    full_name TEXT,
    username TEXT,
    balance REAL DEFAULT 0
)
""")
conn.commit()

required_columns = {
    "full_name": "TEXT",
    "username": "TEXT",
    "balance": "REAL DEFAULT 0"
}
cursor.execute("SELECT column_name FROM information_schema.columns WHERE table_name = 'users';")
existing_cols_info = cursor.fetchall()
existing_col_names = [col[0] for col in existing_cols_info]

for col_name, col_def in required_columns.items():
    if col_name not in existing_col_names:
        alter_stmt = f"ALTER TABLE users ADD COLUMN {col_name} {col_def}"
        cursor.execute(alter_stmt)
        conn.commit()

# -----------------------------------
# ุฏูุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงููุณุชุฎุฏููู
# -----------------------------------
def get_user_from_db(user_id):
    cursor.execute("SELECT user_id, full_name, username, balance FROM users WHERE user_id=%s", (user_id,))
    return cursor.fetchone()

def add_user_to_db(user_id, full_name, username):
    row = get_user_from_db(user_id)
    if not row:
        cursor.execute(
            "INSERT INTO users (user_id, full_name, username, balance) VALUES (%s, %s, %s, %s)",
            (user_id, full_name, username, 0.0)
        )
        conn.commit()

def update_user_balance_in_db(user_id, balance):
    cursor.execute("UPDATE users SET balance=%s WHERE user_id=%s", (balance, user_id))
    conn.commit()

def update_username_in_db(user_id, username):
    cursor.execute("UPDATE users SET username=%s WHERE user_id=%s", (username, user_id))
    conn.commit()

def get_all_users():
    cursor.execute("SELECT user_id, full_name, username, balance FROM users")
    return cursor.fetchall()

def get_users_with_balance_desc():
    cursor.execute("SELECT user_id, full_name, username, balance FROM users WHERE balance > 0 ORDER BY balance DESC")
    return cursor.fetchall()

def sync_balance_from_db(user_id):
    row = get_user_from_db(user_id)
    if row:
        users_balance[user_id] = row[3]
    else:
        users_balance[user_id] = users_balance.get(user_id, 0.0)

def sync_balance_to_db(user_id):
    bal = users_balance.get(user_id, 0.0)
    row = get_user_from_db(user_id)
    if row:
        update_user_balance_in_db(user_id, bal)
    else:
        add_user_to_db(user_id, "Unknown", "NoUsername")
        update_user_balance_in_db(user_id, bal)

# -----------------------------------
# ููุญุงุช ุงูููุงุชูุญ
# -----------------------------------
def main_menu_keyboard(user_id):
    if user_id == ADMIN_ID:
        buttons = [[InlineKeyboardButton("ููุญุฉ ุชุญูู ุงููุงูู", callback_data="admin_menu")]]
    else:
        buttons = [
            [InlineKeyboardButton("ุงูุฎุฏูุงุช", callback_data="show_services")],
            [InlineKeyboardButton("ุฑุตูุฏู", callback_data="show_balance")]
        ]
    return InlineKeyboardMarkup(buttons)

def admin_menu_keyboard():
    buttons = [
        [
            InlineKeyboardButton("ุญุถุฑ ุงููุณุชุฎุฏู", callback_data="block_user"),
            InlineKeyboardButton("ุงูุบุงุก ุญุธุฑ ุงููุณุชุฎุฏู", callback_data="unblock_user")
        ],
        [
            InlineKeyboardButton("ุฅุถุงูุฉ ุงูุฑุตูุฏ", callback_data="admin_add_balance"),
            InlineKeyboardButton("ุฎุตู ุงูุฑุตูุฏ", callback_data="admin_discount")
        ],
        [
            InlineKeyboardButton("ุนุฏุฏ ุงููุณุชุฎุฏููู", callback_data="admin_users_count"),
            InlineKeyboardButton("ุฑุตูุฏ ุงููุณุชุฎุฏููู", callback_data="admin_users_balance")
        ],
        [
            InlineKeyboardButton("ูุฑุงุฌุนุฉ ุงูุทูุจุงุช", callback_data="review_orders"),
            InlineKeyboardButton("ุงููุงุฑุชุงุช ุงููุนููุฉ", callback_data="pending_cards")
        ],
        [
            InlineKeyboardButton("ุทูุจุงุช ุดุฏุงุช ุจุจุฌู", callback_data="pending_pubg_orders"),
            InlineKeyboardButton("ูุญุต ุฑุตูุฏ API", callback_data="api_check_balance")
        ],
        [
            InlineKeyboardButton("ูุญุต ุญุงูุฉ ุทูุจ API", callback_data="api_order_status"),
            InlineKeyboardButton("ุงุนูุงู ุงูุจูุช", callback_data="admin_announce")
        ],
        [
            InlineKeyboardButton("ุทูุจุงุช ุดุญู ุงูุงูุชููุฒ", callback_data="pending_itunes_orders")
        ],
        [
            InlineKeyboardButton("ุชุนุฏูู ุฃุณุนุงุฑ ุงูุฎุฏูุงุช", callback_data="edit_service_prices")
        ],
        [InlineKeyboardButton("ุฑุฌูุน", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def services_menu_keyboard():
    buttons = [
        [InlineKeyboardButton("ูุณู ุงููุชุงุจุนูู", callback_data="show_followers")],
        [InlineKeyboardButton("ูุณู ุงููุงููุงุช", callback_data="show_likes")],
        [InlineKeyboardButton("ูุณู ุงููุดุงูุฏุงุช", callback_data="show_views")],
        [InlineKeyboardButton("ูุณู ูุดุงูุฏุงุช ุงูุจุซ ุงููุจุงุดุฑ", callback_data="show_live_views")],
        [InlineKeyboardButton("ูุณู ุดุญู ุดุฏุงุช ุจุจุฌู", callback_data="show_pubg")],
        [InlineKeyboardButton("ุฑูุน ุณููุฑ ุชููุชูู", callback_data="show_tiktok_score")],
        [InlineKeyboardButton("ูุณู ุดุฑุงุก ุฑุตูุฏ ุงูุชููุฒ", callback_data="show_itunes_services")],
        [InlineKeyboardButton("ุฎุฏูุงุช ุงูุชููุฌุฑุงู", callback_data="show_telegram_services")],
        [InlineKeyboardButton("ุฑุฌูุน", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(buttons)

def tiktok_score_keyboard():
    score_services = {k: v for k, v in services_dict.items() if "ุฑูุน ุณููุฑ" in k}
    service_buttons = []
    for service_name, price in score_services.items():
        btn_text = f"{service_name} - {price}$"
        service_buttons.append([InlineKeyboardButton(btn_text, callback_data=f"service_{service_name}")])
    service_buttons.append([InlineKeyboardButton("ุฑุฌูุน", callback_data="show_services")])
    return InlineKeyboardMarkup(service_buttons)

def itunes_services_keyboard():
    buttons = []
    for service_name, price in itunes_services.items():
        btn_text = f"{service_name} - {price}$"
        buttons.append([InlineKeyboardButton(btn_text, callback_data=f"itunes_service_{service_name}")])
    buttons.append([InlineKeyboardButton("ุฑุฌูุน", callback_data="show_services")])
    return InlineKeyboardMarkup(buttons)

def telegram_services_keyboard():
    buttons = []
    for service_name, price in telegram_services.items():
        btn_text = f"{service_name} - {price}$"
        buttons.append([InlineKeyboardButton(btn_text, callback_data=f"telegram_service_{service_name}")])
    buttons.append([InlineKeyboardButton("ุฑุฌูุน", callback_data="show_services")])
    return InlineKeyboardMarkup(buttons)

# -----------------------------------
# ุชูุฑูุบ ุญุงูุงุช ุงูุงูุชุธุงุฑ ูู user_data
# -----------------------------------
def clear_all_waiting_flags(context: CallbackContext):
    waiting_keys = [
        "waiting_for_card",
        "waiting_for_block",
        "waiting_for_add_balance_user_id",
        "waiting_for_add_balance_amount",
        "waiting_for_discount_user_id",
        "waiting_for_discount_amount",
        "waiting_for_broadcast",
        "waiting_for_api_order_status",
        "selected_service",
        "service_price",
        "selected_pubg_service",
        "pubg_service_price",
        "card_to_approve",
        "card_to_approve_index",
        "waiting_for_amount",
        "selected_itunes_service",
        "itunes_service_price",
        "waiting_for_itunes_confirm",
        "itunes_temp_choice",
        "waiting_for_itunes_code",
        "itunes_to_complete",
        "itunes_to_complete_index",
        "selected_telegram_service",
        "telegram_service_price",
        "waiting_for_telegram_link",
        "service_to_update",
        "waiting_for_new_price"
    ]
    for key in waiting_keys:
        context.user_data.pop(key, None)

# -----------------------------------
# ุงููุธุงู ุงูุฌุฏูุฏ ููุฅุนูุงู
# -----------------------------------
def broadcast_ad(update: Update, context: CallbackContext):
    announcement_prefix = "โจ ุฅุนูุงู ูู ูุงูู ุงูุจูุช โจ\n\n"
    all_users = get_all_users()
    admin_reply = "ุชู ุฅุฑุณุงู ุงูุฅุนูุงู ูุฌููุน ุงููุณุชุฎุฏููู."

    # ุตูุฑุฉ
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        caption = update.message.caption if update.message.caption else ""
        new_caption = announcement_prefix + caption
        for usr in all_users:
            try:
                context.bot.send_photo(chat_id=usr[0], photo=file_id, caption=new_caption)
            except Exception as e:
                logger.error("Error sending photo to %s: %s", usr[0], e)
        update.message.reply_text(admin_reply)

    # ููุฏูู
    elif update.message.video:
        file_id = update.message.video.file_id
        caption = update.message.caption if update.message.caption else ""
        new_caption = announcement_prefix + caption
        for usr in all_users:
            try:
                context.bot.send_video(chat_id=usr[0], video=file_id, caption=new_caption)
            except Exception as e:
                logger.error("Error sending video to %s: %s", usr[0], e)
        update.message.reply_text(admin_reply)

    # ุชุณุฌูู ุตูุชู
    elif update.message.voice:
        file_id = update.message.voice.file_id
        for usr in all_users:
            try:
                context.bot.send_message(chat_id=usr[0], text=announcement_prefix)
                context.bot.send_voice(chat_id=usr[0], voice=file_id)
            except Exception as e:
                logger.error("Error sending voice to %s: %s", usr[0], e)
        update.message.reply_text(admin_reply)

    # ูุต
    elif update.message.text:
        text_to_send = announcement_prefix + update.message.text
        for usr in all_users:
            try:
                context.bot.send_message(chat_id=usr[0], text=text_to_send)
            except Exception as e:
                logger.error("Error sending text to %s: %s", usr[0], e)
        update.message.reply_text(admin_reply)

    else:
        update.message.reply_text("ููุน ุงูุฑุณุงูุฉ ุบูุฑ ูุฏุนูู.")

# -----------------------------------
# ุฏุงูุฉ /start
# -----------------------------------
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in blocked_users and user_id != ADMIN_ID:
        update.message.reply_text("ููุฏ ุชู ุญุถุฑู ูู ุงุณุชุฎุฏุงู ุงูุจูุช ๐คฃ.\nุงูุชุธุฑ ุญุชู ูุชู ุงูุบุงุก ุญุธุฑู.")
        return

    full_name = update.effective_user.full_name
    username = update.effective_user.username or "NoUsername"
    add_user_to_db(user_id, full_name, username)
    update_username_in_db(user_id, username)
    sync_balance_from_db(user_id)

    text_msg = "ูุฑุญุจุงู ุจู ูู ุงูุจูุช!"
    reply_markup = main_menu_keyboard(user_id)
    update.message.reply_text(text_msg, reply_markup=reply_markup)

# -----------------------------------
# ูุญุต ุฑุตูุฏ ุงูู API
# -----------------------------------
def api_check_balance(update: Update, context: CallbackContext):
    params = {'key': API_KEY, 'action': 'balance'}
    try:
        response = requests.post(API_URL, data=params)
        balance_info = response.json()
        if "balance" in balance_info:
            text_msg = f"ุฑุตูุฏ ุญุณุงุจู ูู API: {balance_info['balance']}$"
        else:
            text_msg = f"ุญุฏุซ ุฎุทุฃ ูู ุฌูุจ ุงูุฑุตูุฏ ูู API: {balance_info.get('error', 'ุบูุฑ ูุนุฑูู')}"
    except Exception as e:
        text_msg = "ูุดู ุงูุงุชุตุงู ุจุงูู API."

    if update.callback_query:
        query = update.callback_query
        btns = [[InlineKeyboardButton("ุฑุฌูุน", callback_data="admin_menu")]]
        query.edit_message_text(text_msg, reply_markup=InlineKeyboardMarkup(btns))
    else:
        update.message.reply_text(text_msg)

# -----------------------------------
# ุชูููุฐ ุงูุทูุจ ุนุจุฑ ุงูู API (ุนูุฏ ูุจูู ุงูุฃุฏููู)
# -----------------------------------
def approve_order_process(order_index: int, context: CallbackContext, query):
    order_info = pending_orders.pop(order_index)
    if order_info['service'] in service_api_mapping:
        mapping = service_api_mapping[order_info['service']]
        quantity = mapping['quantity_multiplier']

        params = {
            'key': API_KEY,
            'action': 'add',
            'service': mapping['service_id'],
            'link': order_info['link'],
            'quantity': quantity
        }
        try:
            response = requests.post(API_URL, data=params)
            api_response = response.json()
        except Exception as e:
            api_response = {"error": "ูุดู ุงุณุชุฏุนุงุก API"}

        if "order" in api_response:
            order_info["order_number"] = api_response["order"]
            order_info["service_number"] = mapping["service_id"]
            order_info["refunded"] = False
            order_info["completed_at"] = time.time()
            completed_orders.append(order_info)

            context.bot.send_message(
                chat_id=order_info['user_id'],
                text=f"ุชู ุงุณุชูุงู ุทูุจู ูุณูู ูุชู ุชูููุฐู ูุฑูุจุงู\nุฑูู ุทูุจู ({api_response['order']})"
            )
            btns = [[InlineKeyboardButton("ุฑุฌูุน", callback_data="review_orders")]]
            query.edit_message_text("ุชู ุชูููุฐ ุงูุทูุจ ุนุจุฑ API ูุฅุดุนุงุฑ ุงููุณุชุฎุฏู.", reply_markup=InlineKeyboardMarkup(btns))
        else:
            # ูุดู ุชูููุฐ ุงูุทูุจ => ุฅุนุงุฏุฉ ุงูุฑุตูุฏ
            users_balance[order_info['user_id']] += order_info['price']
            sync_balance_to_db(order_info['user_id'])

            context.bot.send_message(
                chat_id=order_info['user_id'],
                text="ูุดู ุชูููุฐ ุงูุทูุจ ุนุจุฑ ุงููุธุงู ุงูุฎุงุฑุฌูุ ุชูุช ุฅุนุงุฏุฉ ุงููุจูุบ ูุฑุตูุฏู."
            )
            btns = [[InlineKeyboardButton("ุฑุฌูุน", callback_data="review_orders")]]
            query.edit_message_text("ูุดู ุชูููุฐ ุงูุทูุจ ุนุจุฑ API ูุชูุช ุฅุนุงุฏุฉ ุงูุฑุตูุฏ ูููุณุชุฎุฏู.", reply_markup=InlineKeyboardMarkup(btns))
    else:
        # ุฎุฏูุฉ ูุฏููุฉ
        order_info["order_number"] = "N/A"
        order_info["service_number"] = "N/A"
        order_info["refunded"] = False
        order_info["completed_at"] = time.time()
        completed_orders.append(order_info)

        context.bot.send_message(
            chat_id=order_info['user_id'],
            text="ุชู ุฅููุงู ุทูุจู ุจูุฌุงุญ (ุฏูู ุชูููุฐ API)ุ ูุง ููุฌุฏ ุชุทุงุจู ููุฎุฏูุฉ."
        )
        btns = [[InlineKeyboardButton("ุฑุฌูุน", callback_data="review_orders")]]
        query.edit_message_text("ุชู ุชุฃููุฏ ุงูุทูุจ ูุฅุดุนุงุฑ ุงููุณุชุฎุฏู.", reply_markup=InlineKeyboardMarkup(btns))

# -----------------------------------
# ูุนุงูุฌ ุงูุถุบุท ุนูู ุงูุฃุฒุฑุงุฑ
# -----------------------------------
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    query.answer()

    clear_all_waiting_flags(context)

    if user_id in blocked_users and user_id != ADMIN_ID:
        query.answer("ููุฏ ุชู ุญุถุฑู ูู ุงุณุชุฎุฏุงู ุงูุจูุช ๐คฃ.", show_alert=True)
        return

    # -- ุงุฎุชูุงุฑ ุฎุฏูุฉ ูู ุงูุฎุฏูุงุช ุงูุนุงูุฉ --
    if data.startswith("service_"):
        service_name = data[len("service_"):]
        price = services_dict.get(service_name)
        if price is None:
            query.edit_message_text("ุงูุฎุฏูุฉ ุบูุฑ ููุฌูุฏุฉ.")
            return

        current_balance = users_balance.get(user_id, 0.0)
        if current_balance < price:
            buttons = [
                [InlineKeyboardButton("ุดุญู ุนุจุฑ ุงุณูุงุณูู", callback_data="charge_asiacell")],
                [InlineKeyboardButton("ุฑุฌูุน", callback_data="show_services")]
            ]
            query.edit_message_text("ุฑุตูุฏู ููุณ ูุงููุงู.", reply_markup=InlineKeyboardMarkup(buttons))
            return

        # ูุต ูุฎุตุต ูุจุนุถ ุงูุฎุฏูุงุช
        if "ุงูุณุชุบุฑุงู" in service_name:
            message_text = (
                "ุงูุฑุฌุงุก ุฅุฑุณุงู ุฑุงุจุท ุงูุฎุฏูุฉ ุงูุฎุงุต ุจู\n"
                "๐ด ุชูุจูู:\n"
                "ูุฑุฌู ุฅุทูุงุก ุฒุฑ 'ุชููุฒ ูููุฑุงุฌุนุฉ' ุฏุงุฎู ุญุณุงุจู ุงูุงูุณุชุบุฑุงู ูุจู ุงุฑุณุงู ุฑุงุจุท ุงูุฎุฏูู ูุถูุงู ุฅููุงู ุทูุจู!"
            )
        elif "ุฑูุน ุณููุฑ ุจุซ" in service_name:
            message_text = (
                "ูุฑุฌู ุงุฑุณุงู ุฑุงุจุท ุงูุจุซ ุงูุฎุงุต ุจู\n"
                "๐ดุชูุจูู: ูุฑุฌู ุงุฑุณุงู ุฑุงุจุท ุงูุจุซ ูููุณ ุงูููุฒุฑููู!!"
            )
        elif "ุชููุชูู" in service_name:
            message_text = (
                "ุงูุฑุฌุงุก ุฅุฑุณุงู ุงูุฑุงุจุท ุงูุฎุงุต ุจุงูุฎุฏูุฉ ุงููุทููุจุฉ:\n"
                "๐ดููุงุญุธุฉ:ุงุฑุณู ุงูุฑุงุจุท ูููุณ ุงูููุฒุฑููู!"
            )
        else:
            message_text = "ุงูุฑุฌุงุก ุฅุฑุณุงู ุงูุฑุงุจุท ุงูุฎุงุต ุจุงูุฎุฏูุฉ ุงููุทููุจุฉ:"

        context.user_data["selected_service"] = service_name
        context.user_data["service_price"] = price
        query.edit_message_text(message_text)
        return

    # ุฒุฑ ุงูุฑุฌูุน ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ
    if data == "back_main":
        query.edit_message_text("ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ:", reply_markup=main_menu_keyboard(user_id))
        return

    # ุนุฑุถ ุงูุฎุฏูุงุช
    if data == "show_services":
        query.edit_message_text("ุงุฎุชุฑ ุงููุณู:", reply_markup=services_menu_keyboard())
        return

    if data == "show_tiktok_score":
        query.edit_message_text("ุงุฎุชุฑ ุฎุฏูุฉ ุฑูุน ุณููุฑ ุชููุชูู ุงููุทููุจุฉ:", reply_markup=tiktok_score_keyboard())
        return

    # ููุญุฉ ุงููุงูู
    if data == "admin_menu":
        if user_id == ADMIN_ID:
            query.edit_message_text("ููุญุฉ ุชุญูู ุงููุงูู:", reply_markup=admin_menu_keyboard())
        else:
            query.edit_message_text("ุนุฐุฑุงูุ ุฃูุช ูุณุช ุงููุงูู.")
        return

    # -- ุชุนุฏูู ุฃุณุนุงุฑ ุงูุฎุฏูุงุช --
    if data == "edit_service_prices":
        if user_id != ADMIN_ID:
            query.edit_message_text("ุนุฐุฑุงูุ ูุฐู ุงูููุฒุฉ ูุฎุตุตุฉ ูููุงูู ููุท.")
            return

        keyboard = []
        for service_name, price in services_dict.items():
            btn_text = f"{service_name} - {price}$"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"edit_service_price_{service_name}")])

        keyboard.append([InlineKeyboardButton("ุฑุฌูุน", callback_data="admin_menu")])
        query.edit_message_text("ุงุฎุชุฑ ุงูุฎุฏูุฉ ุงูุชู ุชุฑูุฏ ุชุนุฏูู ุณุนุฑูุง:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if data.startswith("edit_service_price_"):
        if user_id != ADMIN_ID:
            query.edit_message_text("ุนุฐุฑุงูุ ูุฐู ุงูููุฒุฉ ูุฎุตุตุฉ ูููุงูู ููุท.")
            return

        service_name = data[len("edit_service_price_"):]
        context.user_data["service_to_update"] = service_name
        context.user_data["waiting_for_new_price"] = True
        query.edit_message_text(f"ุฃุฑุณู ุงูุณุนุฑ ุงูุฌุฏูุฏ ูู {service_name}:")
        return

    # ุจููุฉ ุงูุฃุฒุฑุงุฑ ุงูุฅุฏุงุฑูุฉ (ุญุธุฑ/ุฅูุบุงุก ุญุธุฑ ... ุฅุถุงูุฉ ุงูุฑุตูุฏ ... ุฅูุฎ)
    # ... ุณุชุฌุฏูุง ูู ุงูููุฏ ุงูุฃุตูู ุฅุฐุง ููุช ุจุญุงุฌุฉ ููู ุงูุชูุงุตูู ...
    # ูู ูุญุฐููุงุ ุฅููุง ุชูุชุงุจุน ุจููุณ ุงูููุทู (block_user, unblock_user, admin_add_balance...ุงูุฎ)
    # ------------------------------------------
    # ุจููุฉ ุงูุฃูุณุงู ูู ุงูููุฏ: show_followers, show_likes, show_views, show_live_views, show_pubg, show_itunes_services...
    # (ููุง ูู ูู ุงูููุฏ ุงูุฐู ุจุนุซุชู ุฃูุชุ ุฃู ูู ุงูุฃูุซูุฉ ุงูุณุงุจูุฉ).

    if data == "show_followers":
        followers_services = {k: v for k, v in services_dict.items() if "ูุชุงุจุนูู" in k}
        service_buttons = []
        for service_name, price in followers_services.items():
            btn_text = f"{service_name} - {price}$"
            service_buttons.append([InlineKeyboardButton(btn_text, callback_data=f"service_{service_name}")])
        service_buttons.append([InlineKeyboardButton("ุฑุฌูุน", callback_data="show_services")])
        query.edit_message_text("ุงุฎุชุฑ ุงูุฎุฏูุฉ ุงููุทููุจุฉ:", reply_markup=InlineKeyboardMarkup(service_buttons))
        return

    elif data == "show_likes":
        likes_services = {k: v for k, v in services_dict.items() if "ูุงููุงุช" in k}
        service_buttons = []
        for service_name, price in likes_services.items():
            btn_text = f"{service_name} - {price}$"
            service_buttons.append([InlineKeyboardButton(btn_text, callback_data=f"service_{service_name}")])
        service_buttons.append([InlineKeyboardButton("ุฑุฌูุน", callback_data="show_services")])
        query.edit_message_text("ุงุฎุชุฑ ุงูุฎุฏูุฉ ุงููุทููุจุฉ:", reply_markup=InlineKeyboardMarkup(service_buttons))
        return

    elif data == "show_views":
        views_services = {k: v for k, v in services_dict.items() if "ูุดุงูุฏุงุช ุชููุชูู" in k or "ูุดุงูุฏุงุช ุงูุณุชุบุฑุงู" in k}
        service_buttons = []
        for service_name, price in views_services.items():
            btn_text = f"{service_name} - {price}$"
            service_buttons.append([InlineKeyboardButton(btn_text, callback_data=f"service_{service_name}")])
        service_buttons.append([InlineKeyboardButton("ุฑุฌูุน", callback_data="show_services")])
        query.edit_message_text("ุงุฎุชุฑ ุงูุฎุฏูุฉ ุงููุทููุจุฉ:", reply_markup=InlineKeyboardMarkup(service_buttons))
        return

    elif data == "show_live_views":
        live_views_services = {k: v for k, v in services_dict.items() if "ูุดุงูุฏุงุช ุจุซ" in k}
        service_buttons = []
        for service_name, price in live_views_services.items():
            btn_text = f"{service_name} - {price}$"
            service_buttons.append([InlineKeyboardButton(btn_text, callback_data=f"service_{service_name}")])
        service_buttons.append([InlineKeyboardButton("ุฑุฌูุน", callback_data="show_services")])
        query.edit_message_text("ุงุฎุชุฑ ุงูุฎุฏูุฉ ุงููุทููุจุฉ:", reply_markup=InlineKeyboardMarkup(service_buttons))
        return

    # ูุบูุฑูุง ูู ุงูุฃูุณุงู...
    elif data == "show_balance":
        balance = users_balance.get(user_id, 0.0)
        buttons = [
            [InlineKeyboardButton("ุดุญู ุนุจุฑ ุงุณูุงุณูู", callback_data="charge_asiacell")],
            [InlineKeyboardButton("ุฑุฌูุน", callback_data="back_main")]
        ]
        query.edit_message_text(f"ุฑุตูุฏู ุงูุญุงูู: {balance}$", reply_markup=InlineKeyboardMarkup(buttons))
        return

    elif data == "charge_asiacell":
        context.user_data["waiting_for_card"] = True
        query.edit_message_text("ุฃุฑุณู ุฑูู ุงููุงุฑุช ุงููููู ูู 14 ุฑูู ุฃู 16 ุฑูู:")
        return


# -----------------------------------
# ูุนุงูุฌ ุงูุฑุณุงุฆู ุงููุตูุฉ
# -----------------------------------
def handle_messages(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text_msg = update.message.text.strip() if update.message.text else ""

    # 1) ุฅุฐุง ูุงู ุงูุฃุฏููู ุจุงูุชุธุงุฑ ุฅุฏุฎุงู ุณุนุฑ ุฌุฏูุฏ (ุชุนุฏูู ุงูุณุนุฑ ูู ุงูุฎุฏูุงุช)
    if user_id == ADMIN_ID and context.user_data.get("waiting_for_new_price"):
        context.user_data.pop("waiting_for_new_price", None)
        service_name = context.user_data.pop("service_to_update", None)
        if not service_name:
            update.message.reply_text("ูู ูุชู ุชุญุฏูุฏ ุงูุฎุฏูุฉ ุจุดูู ุตุญูุญ.")
            return

        try:
            new_price = float(text_msg)
        except ValueError:
            update.message.reply_text("ุงูุฑุฌุงุก ุฅุฏุฎุงู ุฑูู ุตุงูุญ ููุณุนุฑ.")
            return

        # ููุง ุงูุฅุตูุงุญ: ุงุณุชุฎุฏุงู services_dict
        if service_name in services_dict:
            services_dict[service_name] = new_price
            update.message.reply_text(f"ุชู ุชุนุฏูู ุณุนุฑ ุงูุฎุฏูุฉ '{service_name}' ุฅูู {new_price}$ ุจูุฌุงุญ.")
        else:
            update.message.reply_text("ุงูุฎุฏูุฉ ุบูุฑ ููุฌูุฏุฉ ูู ุงููุงููุณ.")
        return

    # 2) ุจููุฉ ุญุงูุงุช ุงูุงูุชุธุงุฑ (ูุซู ุฅุฏุฎุงู ุขูุฏู ุงููุณุชุฎุฏู ูุดุญู ุงูุฑุตูุฏุ ุฅุฏุฎุงู ููุฏ ุงูุชููุฒ...)
    # ... ุงูุณุฎ ููุฏู ุงูุฃุตูู ููุง ูู ...

    # ุฅุฐุง ูู ุชูุทุจู ุฃู ุญุงูุฉ ุงูุชุธุงุฑ ูุนุฑููุฉ
    update.message.reply_text("ูุฑุฌู ุงุณุชุฎุฏุงู ุงูุฃุฒุฑุงุฑ ูุชูููุฐ ุงูุฃูุงูุฑ ุฃู ุงูุชุญูู ูู ุงูุฎูุงุฑุงุช.")

# -----------------------------------
# ุฏุงูุฉ main
# -----------------------------------
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_messages))

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
